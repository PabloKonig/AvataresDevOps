name: CI/CD Pipeline DevOps                                     # Nombre del workflow

on:                                                             # Define cuándo se ejecuta el workflow
  push:
    branches:
      - main
  pull_request:
    branches:
      - main                                                    # Se ejecutará en cada push a la rama "main"

jobs:                                                           # Define los trabajos a ejecutar en el workflow
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar Repo
        uses: actions/checkout@v4

      - name: Run tests backend
        run: |
          echo "Ejecutando test de BackEnd...."
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install Backend Dependencies
        run: cd Backend && pip install -r requirements.txt
      - name: Run Tests
        run:  echo "Para futuras pruebas"                       # Comandos para ejecutar pruebas del backend
   
      - name: Run tests FrontEnd
        run: |
          echo "Ejecutando test de FrontEnd...."
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'
      - name: Install Frontend Dependencies
        run: cd Frontend && npm install
      - name: Run Frontend Tests
        run: cd Frontend && npm run test

  build:                                                        # Nombre del primer trabajo
    runs-on: ubuntu-latest                                      # Sistema operativo para ejecutar el trabajo

    steps:                                                      # Pasos a ejecutar dentro del trabajo
      - name: Clonar Repo                                       # Nombre del paso
        uses: actions/checkout@v4                               # Acción predefinida para clonar el repositorio
        
      - name: Read version from file
        run: |
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV      # Toma del archivo version.txt la versión para las imagenes a subir a Docker Hub.

      - name: Login a Docker Hub                                # Inicia sesión en Docker Hub
        uses: docker/login-action@v3                            # Acción para autenticarse en Docker Hub
        with:                                                   # Parámetros para la acción
          username: ${{ secrets.DOCKER_HUB_USERNAME }}          # Usuario de Docker Hub (secreto)
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}          # Contraseña de Docker Hub (secreto)

      - name: Build and push imagen BackEnd                     # Construye y sube la imagen del backend
        uses: docker/build-push-action@v6                       # Acción para construir y subir imágenes Docker
        with:
          context: ./Backend                                    # Directorio con el Dockerfile del backend
          push: true                                            # Habilita la subida a Docker Hub
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/avatares-backend:${{ env.VERSION }}  # Nombre de la imagen en Docker Hub

      - name: Build and push frontend image                     # Construye y sube la imagen del frontend
        uses: docker/build-push-action@v6                       # Acción para construir y subir imágenes Docker
        with:
          context: ./Frontend                                   # Directorio con el Dockerfile del frontend
          push: true                                            # Habilita la subida a Docker Hub
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/avatares-frontend:${{ env.VERSION }}   # Nombre de la imagen en Docker Hub

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Setup SSH Connection to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }} 
          username: ubuntu 
          key: ${{ secrets.EC2_PRIVATE_KEY }} 
      - name: Deploy to Minikube
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            minikube update-context
            # Aplicar manifiestos de la aplicación (desde la carpeta Infraestructura/kubernetes)
            kubectl apply -f Infraestructura/kubernetes/backend-deployment.yaml
            kubectl apply -f Infraestructura/kubernetes/backend-service.yaml
            kubectl apply -f Infraestructura/kubernetes/frontend-deployment.yaml
            kubectl apply -f Infraestructura/kubernetes/frontend-service.yaml